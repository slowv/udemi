spring:
  application:
    name: Udemi
  main:
    allow-bean-definition-overriding: true

  cloud:
    function:
      definition: sendTestKafka
    stream:
      bindings:
        sendTestKafka-out-0:
          destination: test-kafka
      kafka:
        binder:
          brokers: localhost:9092

  elasticsearch:
    uris: http://localhost:9200

  cache:
    type: redis
    redis:
      time-to-live: 3600000 # TTL cache (1 gi·ªù)
  data:
    redis:
      host: localhost
      port: 6379

  servlet:
    multipart:
      max-file-size: 10GB
      max-request-size: 10GB

  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${POSTGRESQL_HOST:localhost}:${POSTGRESQL_PORT:5432}/${POSTGRESQL_DATABASE:udemi}
    username: ${POSTGRESQL_USER:udemi}
    password: ${POSTGRESQL_PASS:123456}
    hikari:
      poolName: Hikari
      auto-commit: false

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    database: postgresql
    show-sql: true
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    generate-ddl: true
    properties:
      hibernate.jdbc.time_zone: UTC
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.cache.use_second_level_cache: false
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
      # modify batch size as necessary
      hibernate.jdbc.batch_size: 25
      hibernate.order_inserts: true
      hibernate.order_updates: true
      hibernate.query.fail_on_pagination_over_collection_fetch: true
      hibernate.query.in_clause_parameter_padding: true\

  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
    properties:
      org:
        quartz:
          scheduler:
            instanceName: MyQuartzScheduler
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
            useProperties: true
            isClustered: false
            tablePrefix: QRTZ_
            dataSource: udemi
          dataSource:
            udemi:
              driver: org.postgresql.Driver
              URL: jdbc:postgresql://${POSTGRESQL_HOST:localhost}:${POSTGRESQL_PORT:5432}/${POSTGRESQL_DATABASE:udemi}
              user: ${POSTGRESQL_USER:udemi}
              password: ${POSTGRESQL_PASS:123456}
          threadPool:
            threadCount: 5
  
  mail:
    username: quocviet.hn98@gmail.com
    password: "xdoh vuwj eawd lizr"
    host: smtp.gmail.com
    port: 587
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

integration:
  minio:
    access-key: admin
    secret-key: admin@2024
    url: http://localhost:9000

logging:
  level:
    ROOT: INFO
    org.hibernate.SQL: INFO
    com.slowv.udemi: debug

jwt:
  # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
  jwtSecret: ${JWT_SECRET:MWM0NzE4MDk2MGQwMWFkNjZiNDQ5ZTJkMTJjYTE2N2M1YTFhY2E3M2UzMzBlMGMzZjU3OGVhMGQwMmQyZGM5OTgyODJlOWIwZGVhMzJkOTUzNTdlMjM4ZDIxMTk0YjgzNmEzNDNlMTBjZTMwMGMyNjgzYTc2ZTlmZjE5MzZkZmM=}
  # Token is valid 24 hours
  jwtExpiration: ${JWT_EXPIRE:86400}
  rememberMeExpiration: ${JWT_EXPIRE:2592000}

  rsa:
    expire: 15
    private-key: classpath:certs/privateKey.pem
    public-key: classpath:certs/publicKey.pem

cache:
  redis:
    expiration: 3600 # By default, objects stay 1 hour (in seconds) in the cache
    server: redis://localhost:6379
    cluster: false
    # server: redis://localhost:6379,redis://localhost:16379,redis://localhost:26379
    # cluster: true

channel:
  resource-service:
    url: http://localhost:8081/resource-service/api
    api:
      resource: ${channel.resource-service.url}/resources

server:
  port: 8080
